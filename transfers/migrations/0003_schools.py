# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-09-26 20:58
from __future__ import unicode_literals
from django.db import migrations, transaction
from transfers.models import School
from cps_migration.settings import BASE_DIR
import csv
from tcr_tools.typify import intify

### START CONFIG ###
data_dir = BASE_DIR + '/data/processed/'
enrollment_filename = data_dir + '2016-17_fall_enrollment_count_ISBE.csv' 
rcdts_filenames = [data_dir + x for x in [
                    'RCDTS_all__ISC,_ROE,_Reg_Prg.csv',
                    'RCDTS_all__Non_Pub_Sch.csv',
                    'RCDTS_all__Public_Dist_&_Sch.csv',
                    'RCDTS_all__Spec_Educ_Dist_&_Sch.csv',
                    'RCDTS_all__SpEdPrivFac.csv',
                    'RCDTS_all__Voc_Tech.csv'
                    ]]
### END CONFIG ###

def leading_zeros(value,length):
    count = 0 
    leaders = ''
    while count < length -1:
        leaders += '0'
        count += 1
    return (leaders + value.replace('.0',''))[-length:]


@transaction.atomic
def load_schools(apps,schema_editor):
    print('loading schools')
    enrollment_csv = csv.DictReader(open(enrollment_filename))
    for row in enrollment_csv:
        try:
            rcdts = row['Reg/Cty/ Dist/Type'].replace('-','') + leading_zeros(row['School'],4)
            if len(rcdts) != 15:
                print rcdts
                continue
            school, created = School.objects.get_or_create(rcdts=rcdts,name=row['School Name'])
            if created:
                school.county = row['County']
                school.cat = row['CAT']
                school.rcdts = rcdts
                school.name = row['School Name']
                school.k12 = intify(row['K-12'])
                school.housed = intify(row['Housed [PK -12]'])
                school.low_income = intify(row['Low Income'])
                school.male = intify(row['Male'])
                school.female = intify(row['Female'])
                school.hispanic = intify(row['Hispanic'])
                school.am_ind = intify(row['Am. Indian'])
                school.asian = intify(row['Asian'])
                school.black = intify(row['Black'])
                school.opi = intify(row['OPI'])
                school.white = intify(row['White'])
                school.multiple_races = intify(row['2/More Races'])
                school.pre_k = intify(row['PreK'])
                school.kind = intify(row['K'])
                school.first = intify(row['1.0'])
                school.second = intify(row['2.0'])
                school.third = intify(row['3.0'])
                school.fourth = intify(row['4.0'])
                school.fifth = intify(row['5.0'])
                school.sixth = intify(row['6.0'])
                school.seventh = intify(row['7.0'])
                school.eighth = intify(row['8.0'])
                school.ninth = intify(row['9.0'])
                school.tenth = intify(row['10.0'])
                school.eleventh = intify(row['11.0'])
                school.twelfth = intify(row['12.0'])
                school.administrator = row['Principal']
                school.address = row['Address']
                school.city = row['City']
                school.zip_code = row['Zip']
               
                school.save()
        except Exception, e:
            print e

    print('loading more schools')
    for filename in rcdts_filenames:
        rcdts_csv = csv.DictReader(open(filename))
        for row in rcdts_csv:
            try:
                if not row['Region-2 County-3 District-4']:
                    continue
                rcdts = leading_zeros(row['Region-2 County-3 District-4'],9) + leading_zeros(row['Type'],2) + leading_zeros(row['School'],4)
                rcdts = rcdts.replace('.0','')
                if len(rcdts) != 15:
                    import ipdb; ipdb.set_trace()
                if rcdts:
                    school, created = School.objects.get_or_create(rcdts=rcdts,name=row['FacilityName'])
                    if created:
                        school.county = row['CountyName']
                        school.rec_type = row['RecType']
                        school.administrator = row['Administrator']
                        school.address = row['Address']
                        school.city = row['City']
                        school.zip_code = row['Zip']
                        school.phone = row['Telephone']
                        school.grades_served = row['GradeServed']
                        school.st_rep = intify(row['StRep'])
                        school.st_sen = intify(row['StSen'])
                        school.fed_cong = intify(row['FedCong'])
                        school.cat = row['Cat']
                        if 'NCES ID' in row.keys():
                            school.nces_id = row['NCES ID']
                        
                        school.save()
            except Exception, e:
                print(e, row)
                import ipdb; ipdb.set_trace()



class Migration(migrations.Migration):

    dependencies = [
        ('transfers', '0002_students'),
    ]

    operations = [
            migrations.RunPython(load_schools),
    ]
