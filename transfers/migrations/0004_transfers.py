# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-09-26 20:58
from __future__ import unicode_literals
from django.db import migrations, transaction
from transfers.models import Student, School, Transfer
from cps_migration.settings import BASE_DIR
import csv
from tcr_tools.progress import print_progress
from tcr_tools.typify import parse_str_date, intify

### START CONFIG ###
data_dir = BASE_DIR + '/data/processed/'
transfer_in_filenames = [
                         #data_dir + 'ISBE_CPS_TRANSFER_DATA_2009_to_2013__Year_After_CPS.csv',
                         #data_dir + 'ISBE_CPS_TRANSFER_DATA_2013_to_2017__Year_After_CPS.csv',
                         data_dir + '18-073-belsha-follow_up_doc_2009_to_2017__Year_After_CPS.csv',
                        ]
transfer_out_filenames = [
                          #data_dir + 'ISBE_CPS_TRANSFER_DATA_2013_to_2017__CPS_Enrollment.csv',
                          #data_dir + 'ISBE_CPS_TRANSFER_DATA_2009_to_2013__CPS_Enrollment.csv',
                          data_dir + '18-073-belsha-follow_up_doc_2009_to_2017__CPS_Enrollment.csv',
                         ]
fail_log_path = '/tmp/dupe_transfers.csv'
### END CONFIG ###

logger = open(fail_log_path,'w')
logger.write('Student ID,School Year,FTE,Home RCDTS,Serving RCDTS')
logger.close()

@transaction.atomic
def load_transfers(apps,schema_editor):
    print('loading transfers in')
    for transfer_in_filename in transfer_in_filenames:
        transfer_in_csv = [x for x in csv.DictReader(open(transfer_in_filename)) if x['Student ID']]
        total = len(transfer_in_csv)
        count = 0
        for row in transfer_in_csv:
            count += 1
            print_progress(count,total)
            try:
                school_year_adj = intify(row['School Year']) -1
                transfer, created = Transfer.objects.get_or_create(student_id_no=intify(row['Student ID']),school_year=school_year_adj)
                if created:
                    if not transfer.student:
                        transfer.student = student_or_none(row['Student ID'])
                    to_home_school = school_or_none(row['Home RCDTS'])
                    to_serving_school = school_or_none(row['Serving RCDTS'])
                    transfer.to_home_school = to_home_school
                    transfer.to_home_rcdts = row['Home RCDTS']
                    transfer.to_serving_school = to_serving_school
                    transfer.to_serving_rcdts = row['Serving RCDTS']
                    transfer.save()
                else:
                    logger = open(fail_log_path,'a')
                    logcsv = csv.DictWriter(logger,['Student ID','School Year','FTE','Home RCDTS','Serving RCDTS'])
                    logcsv.writerow(row)
                    logger.close()

            except Exception, e:
                import ipdb; ipdb.set_trace()

    print('loading transfers out')
    for transfer_out_filename in transfer_out_filenames:
        transfer_out_csv = [x for x in csv.DictReader(open(transfer_out_filename)) if x['Student ID']]
        total = len(transfer_out_csv)
        count = 0
        for row in transfer_out_csv:
            count += 1
            print_progress(count,total)
            try:
                transfer, created = Transfer.objects.get_or_create(student_id_no=intify(row['Student ID']),school_year=intify(row['School Year']))
                #if created:
                if transfer.from_home_rcdts or transfer.from_serving_rcdts:
                    print('dupe transfer out:', transfer.__dict__, row)
                if not transfer.student:
                    transfer.student = student_or_none(row['Student ID'])
                from_home_school = school_or_none(row['Home RCDTS'])
                from_serving_school = school_or_none(row['Serving RCDTS'])
                transfer.from_home_school = from_home_school
                transfer.from_home_rcdts = row['Home RCDTS']
                transfer.from_serving_school = from_serving_school
                transfer.from_serving_rcdts = row['Serving RCDTS']
                transfer.enrollment_date = parse_str_date(row['Enrollment Date'])
                transfer.exit_date = parse_str_date(row['Exit Date'])
                transfer.exit_code = intify(row['Exit Code'])
                transfer.exit_desc = row['Exit Desc']
                transfer.save()
            except Exception, e:
                import ipdb; ipdb.set_trace()


def school_or_none(rcdts):
    schools = School.objects.filter(rcdts=rcdts)
    if not schools:
        print('no school rcdts found:', rcdts)
    return schools[0] if schools else None

def student_or_none(student_id):
    students = Student.objects.filter(student_id=student_id)
    if not students:
        print('no student found:', student_id)
    return students[0] if students else None



class Migration(migrations.Migration):

    dependencies = [
        ('transfers', '0003_schools'),
    ]

    operations = [
            migrations.RunPython(load_transfers)
    ]
