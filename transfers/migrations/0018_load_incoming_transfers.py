# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-11-06 21:14
from __future__ import unicode_literals
from django.db import migrations, transaction
import csv
from cps_migration.settings import BASE_DIR
from transfers.models import IncomingTransfer, School, Student
from tcr_tools.progress import print_progress
from tcr_tools.typify import parse_str_date, intify

### START CONFIG ###
infile_path = BASE_DIR + '/data/source/incoming_transfers.csv'
### END CONFIG ###

@transaction.atomic
def load_incoming_transfers(apps,schema_editor):
    """
    transfers into cps obtained ~10/26
    """
    print("loading incoming transfers")
    incsv = [x for x in csv.DictReader(open(infile_path))]
    total = len(incsv)
    count = 0
    for row in incsv:
        count += 1
        print_progress(count,total)
        student, created = Student.objects.get_or_create(student_id=row['StuID'])
        if created:
            student.save()
        transfer, created = IncomingTransfer.objects.get_or_create(student_id=student.student_id,school_year=row['School Year Transfer out of'])
        if created:
            transfer.student = student 
            transfer.student_id_no = student.student_id
            from_home_school = school_or_none(fix_rcdts(row['Home RCDTS Transfer out of']))
            from_serving_school = school_or_none(fix_rcdts(row['Serving RCDTS Transfer out of']))
            to_home_school = school_or_none(fix_rcdts(row['Home RCDTS in Chicago']))
            to_serving_school = school_or_none(fix_rcdts(row['Serving RCDTS in Chicago']))

            transfer.from_home_school = from_home_school
            transfer.from_home_rcdts = fix_rcdts(row['Home RCDTS Transfer out of'])
            transfer.from_serving_school = from_serving_school
            transfer.from_serving_rcdts = fix_rcdts(row['Serving RCDTS Transfer out of'])
            transfer.to_home_school = to_home_school
            transfer.to_home_rcdts = fix_rcdts(row['Home RCDTS in Chicago'])
            transfer.to_serving_school = to_serving_school
            transfer.to_serving_rcdts = fix_rcdts(row['Serving RCDTS in Chicago'])

            transfer.enrollment_date = parse_str_date(row['Enrollment Date in Chicago'])
            transfer.exit_date = parse_str_date(row['Exit Date Transfer out of'])

            transfer.save()
        else: # duplicate student/school year combo
            print('dupe: ',row,transfer.__dict__)


def fix_rcdts(rcdts):
    if len(rcdts) == 14:
        rcdts = '0' + rcdts
    return rcdts


def school_or_none(rcdts):
    schools = School.objects.filter(rcdts=rcdts)
    if not schools:
        print('school rcdts lookup fail:',rcdts)
    return schools[0] if schools else None

class Migration(migrations.Migration):

    dependencies = [
        ('transfers', '0016_load_districts'),
    ]

    operations = [
            migrations.RunPython(load_incoming_transfers)
    ]
